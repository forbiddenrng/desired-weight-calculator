{"version":3,"sources":["components/Input.js","components/DateInput.js","components/Button.js","components/Result.js","components/Error.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","className","text","name","value","min","max","type","onChange","result","unit","DateInput","title","Button","onClick","Result","data","initWeight","desiredWeight","height","startDate","endDate","getDateDifference","dateFirst","dateSecond","firstDate","Date","getTime","getBMI","weight","Math","pow","toFixed","changePerDay","days","getBMIDescription","BMI","abs","Error","Calculator","minAndMaxValues","weightMin","weightMax","heightMin","heightMax","state","minStartDate","minEndDate","error","prevState","counter","handleInputChange","e","setState","target","getCurrentDate","toISOString","split","handleDateChange","secondDate","console","log","count","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.92e7bc7f.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Input.css\"\r\nconst Input = (props) => {\r\n  return (\r\n    <div className=\"form_container\">\r\n      <p className=\"input_title\">{props.text}</p>\r\n      <div className=\"form\">\r\n        <input name={props.name} value={props.value} min={props.min} max={props.max} type=\"range\" className=\"input\" onChange={props.onChange}></input>\r\n        <p className=\"result\">{`${props.result} ${props.unit}`}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport \"./DateInput.css\";\r\nconst DateInput = (props) => {\r\n  return (\r\n    <div className=\"form_container\">\r\n      <p className=\"input_title\">{props.title}</p>\r\n      <div className=\"date_form\">\r\n        <input min={props.min} name={props.name} onChange={props.onChange} type=\"date\" className=\"date_input\" value={props.value} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DateInput;","import React from 'react';\r\nimport \"./Button.css\"\r\nconst Button = (props) => {\r\n  return (\r\n    <div className=\"button_form\">\r\n      <button onClick={props.onClick}>Count</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport \"./Result.css\";\r\nconst Result = (props) => {\r\n  const { initWeight, desiredWeight, height, startDate, endDate } = props.data\r\n\r\n  const getDateDifference = (dateFirst, dateSecond) => {\r\n    const firstDate = new Date(dateFirst).getTime();\r\n    const secondDate = new Date(dateSecond).getTime();\r\n    // console.log((secondDate - firstDate) / 86400000)\r\n    return (secondDate - firstDate) / 86400000\r\n  }\r\n  const getBMI = (weight, height) => {\r\n    const BMI = (weight / Math.pow((height / 100), 2)).toFixed(1)\r\n    // console.log(weight, height)\r\n    return BMI;\r\n  }\r\n  const changePerDay = (weight, days) => {\r\n    // console.log(\"ok\")\r\n    return (weight / days).toFixed(2)\r\n  }\r\n  const getBMIDescription = BMI => {\r\n    if (BMI < 15) return \"Very severely underweight\";\r\n    if (BMI < 16) return \"Severely underweight\";\r\n    if (BMI < 18.5) return \"Underweight\";\r\n    if (BMI < 25) return \"Normal\";\r\n    if (BMI < 30) return \"Overweight\";\r\n    if (BMI < 35) return \"Obese Class I\";\r\n    if (BMI < 40) return \"Obese Class II\";\r\n    return \"Obese Class III\";\r\n  }\r\n  const result = initWeight - desiredWeight > 0 ? \"lose\" : \"gain\";\r\n\r\n  return (\r\n    <div className=\"result_panel\">\r\n      <p>You want {result} <span className=\"value_bold\">{Math.abs(initWeight - desiredWeight)}</span> kg</p>\r\n      <p>Your current BMI is <span className=\"value_bold\">{getBMI(initWeight, height)}</span> ({getBMIDescription(getBMI(initWeight, height))})</p>\r\n      <p>Your desired BMI is <span className=\"value_bold\">{getBMI(desiredWeight, height)}</span> ({getBMIDescription(getBMI(desiredWeight, height))})</p>\r\n      <p>You should {result} <span className=\"value_bold\">{changePerDay(Math.abs(initWeight - desiredWeight), getDateDifference(startDate, endDate))}</span> kg per day</p>\r\n      {getDateDifference(startDate, endDate) >= 7 ? <p>You should {result} <span className=\"value_bold\">{changePerDay(Math.abs(initWeight - desiredWeight), (getDateDifference(startDate, endDate)) / 7)}</span> kg per week</p> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport \"./Result.css\"\r\nconst Error = (props) => {\r\n\r\n  return (\r\n    <div className=\"result_panel\">\r\n      <p>Initial and desired weight can't be equal, start and end date must be different</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Error;","import React from 'react';\r\nimport './Calculator.css';\r\nimport Input from \"./Input\";\r\nimport DateInput from \"./DateInput\";\r\nimport Button from \"./Button\";\r\nimport Result from \"./Result\";\r\nimport Error from \"./Error\";\r\nclass Calculator extends React.Component {\r\n  minAndMaxValues = {\r\n    weightMin: 30,\r\n    weightMax: 130,\r\n    heightMin: 120,\r\n    heightMax: 220,\r\n  }\r\n  state = {\r\n    initWeight: 0,\r\n    desiredWeight: 0,\r\n    height: 0,\r\n    startDate: 0,\r\n    minStartDate: 0,\r\n    endDate: 0,\r\n    minEndDate: 0,\r\n    error: false,\r\n    result: false,\r\n  }\r\n  prevState = {\r\n    initWeight: 0,\r\n    desiredWeight: 0,\r\n    startDate: 0,\r\n    endDate: 0,\r\n  }\r\n  counter = 0;\r\n  handleInputChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n\r\n    })\r\n  }\r\n  componentDidMount() {\r\n    this.setState({\r\n      initWeight: (this.minAndMaxValues.weightMin + this.minAndMaxValues.weightMax) / 2,\r\n      desiredWeight: (this.minAndMaxValues.weightMin + this.minAndMaxValues.weightMax) / 2,\r\n      height: (this.minAndMaxValues.heightMin + this.minAndMaxValues.heightMax) / 2,\r\n      startDate: this.getCurrentDate(),\r\n      endDate: this.getCurrentDate(),\r\n      minStartDate: this.getCurrentDate(),\r\n      minEndDate: this.getCurrentDate(),\r\n\r\n\r\n    })\r\n\r\n  }\r\n  getCurrentDate = () => {\r\n    const date = new Date();\r\n    const dateString = date.toISOString().split(\"T\")[0];\r\n    return dateString;\r\n  }\r\n  handleDateChange = (e) => {\r\n    if (e.target.name === \"startDate\") {\r\n      this.setState({\r\n        startDate: e.target.value,\r\n        endDate: e.target.value,\r\n        minEndDate: e.target.value,\r\n\r\n      })\r\n    } else {\r\n      this.setState({\r\n        endDate: e.target.value,\r\n\r\n      })\r\n    }\r\n  }\r\n\r\n  getDateDifference = (dateFirst, dateSecond) => {\r\n    const firstDate = new Date(dateFirst).getTime();\r\n    const secondDate = new Date(dateSecond).getTime();\r\n    console.log((secondDate - firstDate) / 1000)\r\n  }\r\n\r\n  count = () => {\r\n    this.setState({\r\n      error: false,\r\n      result: false,\r\n    })\r\n    this.prevState.initWeight = this.state.initWeight;\r\n    this.prevState.desiredWeight = this.state.desiredWeight;\r\n    this.prevState.height = this.state.height;\r\n    this.prevState.startDate = this.state.startDate;\r\n    this.prevState.endDate = this.state.endDate;\r\n\r\n    const data = {\r\n      initWeight: this.state.initWeight,\r\n      desiredWeight: this.state.desiredWeight,\r\n      height: this.state.height,\r\n      startDate: this.state.startDate,\r\n      endDate: this.state.endDate,\r\n    }\r\n\r\n\r\n    if (data.initWeight === data.desiredWeight || data.startDate === data.endDate) {\r\n      return this.setState({\r\n        error: true,\r\n      })\r\n    }\r\n\r\n    return this.setState({\r\n      result: true,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const data = {\r\n      initWeight: this.prevState.initWeight,\r\n      desiredWeight: this.prevState.desiredWeight,\r\n      height: this.prevState.height,\r\n      startDate: this.prevState.startDate,\r\n      endDate: this.prevState.endDate,\r\n    }\r\n    return (\r\n      <div className=\"calculator\">\r\n        <Input name=\"initWeight\" text=\"Initial weight\" unit=\"kg\" min={this.minAndMaxValues.weightMin} max={this.minAndMaxValues.weightMax} value={this.state.initWeight} onChange={this.handleInputChange} result={this.state.initWeight} />\r\n        <Input name=\"desiredWeight\" text=\"Desired weight\" unit=\"kg\" min={this.minAndMaxValues.weightMin} max={this.minAndMaxValues.weightMax} value={this.state.desiredWeight} onChange={this.handleInputChange} result={this.state.desiredWeight} />\r\n        <Input name=\"height\" text=\"Height\" unit=\"cm\" min={this.minAndMaxValues.heightMin} max={this.minAndMaxValues.heightMax} value={this.state.height} onChange={this.handleInputChange} result={this.state.height} />\r\n\r\n        <DateInput min={this.state.minStartDate} name=\"startDate\" onChange={this.handleDateChange} value={this.state.startDate} title=\"Start date:\" />\r\n        <DateInput min={this.state.minEndDate} name=\"endDate\" onChange={this.handleDateChange} value={this.state.endDate} title=\"Finish date:\" />\r\n        <Button onClick={this.count} />\r\n        {this.state.error ? <Error /> : null}\r\n        {this.state.result ? <Result data={data} /> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\nimport Calculator from './components/Calculator'\nimport './App.css';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <header>\n          <h1 className=\"header\">Desired Weight Calculator</h1>\n        </header>\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}